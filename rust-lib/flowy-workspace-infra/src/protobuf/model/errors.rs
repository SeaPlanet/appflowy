// This file is generated by rust-protobuf 2.22.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `errors.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_1;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ErrorCode {
    WorkspaceNameInvalid = 0,
    WorkspaceIdInvalid = 1,
    AppColorStyleInvalid = 2,
    WorkspaceDescTooLong = 3,
    WorkspaceNameTooLong = 4,
    AppIdInvalid = 10,
    AppNameInvalid = 11,
    ViewNameInvalid = 20,
    ViewThumbnailInvalid = 21,
    ViewIdInvalid = 22,
    ViewDescTooLong = 23,
    ViewDataInvalid = 24,
    ViewNameTooLong = 25,
    UserUnauthorized = 100,
    WsConnectError = 200,
    InternalError = 1000,
    RecordNotFound = 1001,
}

impl ::protobuf::ProtobufEnum for ErrorCode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorCode> {
        match value {
            0 => ::std::option::Option::Some(ErrorCode::WorkspaceNameInvalid),
            1 => ::std::option::Option::Some(ErrorCode::WorkspaceIdInvalid),
            2 => ::std::option::Option::Some(ErrorCode::AppColorStyleInvalid),
            3 => ::std::option::Option::Some(ErrorCode::WorkspaceDescTooLong),
            4 => ::std::option::Option::Some(ErrorCode::WorkspaceNameTooLong),
            10 => ::std::option::Option::Some(ErrorCode::AppIdInvalid),
            11 => ::std::option::Option::Some(ErrorCode::AppNameInvalid),
            20 => ::std::option::Option::Some(ErrorCode::ViewNameInvalid),
            21 => ::std::option::Option::Some(ErrorCode::ViewThumbnailInvalid),
            22 => ::std::option::Option::Some(ErrorCode::ViewIdInvalid),
            23 => ::std::option::Option::Some(ErrorCode::ViewDescTooLong),
            24 => ::std::option::Option::Some(ErrorCode::ViewDataInvalid),
            25 => ::std::option::Option::Some(ErrorCode::ViewNameTooLong),
            100 => ::std::option::Option::Some(ErrorCode::UserUnauthorized),
            200 => ::std::option::Option::Some(ErrorCode::WsConnectError),
            1000 => ::std::option::Option::Some(ErrorCode::InternalError),
            1001 => ::std::option::Option::Some(ErrorCode::RecordNotFound),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ErrorCode] = &[
            ErrorCode::WorkspaceNameInvalid,
            ErrorCode::WorkspaceIdInvalid,
            ErrorCode::AppColorStyleInvalid,
            ErrorCode::WorkspaceDescTooLong,
            ErrorCode::WorkspaceNameTooLong,
            ErrorCode::AppIdInvalid,
            ErrorCode::AppNameInvalid,
            ErrorCode::ViewNameInvalid,
            ErrorCode::ViewThumbnailInvalid,
            ErrorCode::ViewIdInvalid,
            ErrorCode::ViewDescTooLong,
            ErrorCode::ViewDataInvalid,
            ErrorCode::ViewNameTooLong,
            ErrorCode::UserUnauthorized,
            ErrorCode::WsConnectError,
            ErrorCode::InternalError,
            ErrorCode::RecordNotFound,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ErrorCode>("ErrorCode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ErrorCode {
}

impl ::std::default::Default for ErrorCode {
    fn default() -> Self {
        ErrorCode::WorkspaceNameInvalid
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorCode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cerrors.proto*\x86\x03\n\tErrorCode\x12\x18\n\x14WorkspaceNameInval\
    id\x10\0\x12\x16\n\x12WorkspaceIdInvalid\x10\x01\x12\x18\n\x14AppColorSt\
    yleInvalid\x10\x02\x12\x18\n\x14WorkspaceDescTooLong\x10\x03\x12\x18\n\
    \x14WorkspaceNameTooLong\x10\x04\x12\x10\n\x0cAppIdInvalid\x10\n\x12\x12\
    \n\x0eAppNameInvalid\x10\x0b\x12\x13\n\x0fViewNameInvalid\x10\x14\x12\
    \x18\n\x14ViewThumbnailInvalid\x10\x15\x12\x11\n\rViewIdInvalid\x10\x16\
    \x12\x13\n\x0fViewDescTooLong\x10\x17\x12\x13\n\x0fViewDataInvalid\x10\
    \x18\x12\x13\n\x0fViewNameTooLong\x10\x19\x12\x14\n\x10UserUnauthorized\
    \x10d\x12\x13\n\x0eWsConnectError\x10\xc8\x01\x12\x12\n\rInternalError\
    \x10\xe8\x07\x12\x13\n\x0eRecordNotFound\x10\xe9\x07J\xe3\x05\n\x06\x12\
    \x04\0\0\x14\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x05\0\x12\x04\
    \x02\0\x14\x01\n\n\n\x03\x05\0\x01\x12\x03\x02\x05\x0e\n\x0b\n\x04\x05\0\
    \x02\0\x12\x03\x03\x04\x1d\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x03\x04\
    \x18\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x03\x1b\x1c\n\x0b\n\x04\x05\0\
    \x02\x01\x12\x03\x04\x04\x1b\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x04\
    \x04\x16\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x04\x19\x1a\n\x0b\n\x04\
    \x05\0\x02\x02\x12\x03\x05\x04\x1d\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\
    \x05\x04\x18\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x05\x1b\x1c\n\x0b\n\
    \x04\x05\0\x02\x03\x12\x03\x06\x04\x1d\n\x0c\n\x05\x05\0\x02\x03\x01\x12\
    \x03\x06\x04\x18\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x06\x1b\x1c\n\x0b\
    \n\x04\x05\0\x02\x04\x12\x03\x07\x04\x1d\n\x0c\n\x05\x05\0\x02\x04\x01\
    \x12\x03\x07\x04\x18\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x07\x1b\x1c\n\
    \x0b\n\x04\x05\0\x02\x05\x12\x03\x08\x04\x16\n\x0c\n\x05\x05\0\x02\x05\
    \x01\x12\x03\x08\x04\x10\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\x08\x13\
    \x15\n\x0b\n\x04\x05\0\x02\x06\x12\x03\t\x04\x18\n\x0c\n\x05\x05\0\x02\
    \x06\x01\x12\x03\t\x04\x12\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03\t\x15\
    \x17\n\x0b\n\x04\x05\0\x02\x07\x12\x03\n\x04\x19\n\x0c\n\x05\x05\0\x02\
    \x07\x01\x12\x03\n\x04\x13\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03\n\x16\
    \x18\n\x0b\n\x04\x05\0\x02\x08\x12\x03\x0b\x04\x1e\n\x0c\n\x05\x05\0\x02\
    \x08\x01\x12\x03\x0b\x04\x18\n\x0c\n\x05\x05\0\x02\x08\x02\x12\x03\x0b\
    \x1b\x1d\n\x0b\n\x04\x05\0\x02\t\x12\x03\x0c\x04\x17\n\x0c\n\x05\x05\0\
    \x02\t\x01\x12\x03\x0c\x04\x11\n\x0c\n\x05\x05\0\x02\t\x02\x12\x03\x0c\
    \x14\x16\n\x0b\n\x04\x05\0\x02\n\x12\x03\r\x04\x19\n\x0c\n\x05\x05\0\x02\
    \n\x01\x12\x03\r\x04\x13\n\x0c\n\x05\x05\0\x02\n\x02\x12\x03\r\x16\x18\n\
    \x0b\n\x04\x05\0\x02\x0b\x12\x03\x0e\x04\x19\n\x0c\n\x05\x05\0\x02\x0b\
    \x01\x12\x03\x0e\x04\x13\n\x0c\n\x05\x05\0\x02\x0b\x02\x12\x03\x0e\x16\
    \x18\n\x0b\n\x04\x05\0\x02\x0c\x12\x03\x0f\x04\x19\n\x0c\n\x05\x05\0\x02\
    \x0c\x01\x12\x03\x0f\x04\x13\n\x0c\n\x05\x05\0\x02\x0c\x02\x12\x03\x0f\
    \x16\x18\n\x0b\n\x04\x05\0\x02\r\x12\x03\x10\x04\x1b\n\x0c\n\x05\x05\0\
    \x02\r\x01\x12\x03\x10\x04\x14\n\x0c\n\x05\x05\0\x02\r\x02\x12\x03\x10\
    \x17\x1a\n\x0b\n\x04\x05\0\x02\x0e\x12\x03\x11\x04\x19\n\x0c\n\x05\x05\0\
    \x02\x0e\x01\x12\x03\x11\x04\x12\n\x0c\n\x05\x05\0\x02\x0e\x02\x12\x03\
    \x11\x15\x18\n\x0b\n\x04\x05\0\x02\x0f\x12\x03\x12\x04\x19\n\x0c\n\x05\
    \x05\0\x02\x0f\x01\x12\x03\x12\x04\x11\n\x0c\n\x05\x05\0\x02\x0f\x02\x12\
    \x03\x12\x14\x18\n\x0b\n\x04\x05\0\x02\x10\x12\x03\x13\x04\x1a\n\x0c\n\
    \x05\x05\0\x02\x10\x01\x12\x03\x13\x04\x12\n\x0c\n\x05\x05\0\x02\x10\x02\
    \x12\x03\x13\x15\x19b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
